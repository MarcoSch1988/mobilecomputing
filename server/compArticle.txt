ARTICLES

USER HOOK {
  type: 'before',
  arguments: [
    {
      query: [Object],
      route: {},
      provider: 'rest',
      headers: [Object],
      authentication: [Object],
      user: [Object],
      authenticated: true,
      paginate: false,
      _populate: 'skip'
    }
  ],
  service: {
    options: {
      id: '_id',
      events: [],
      paginate: [Object],
      multi: false,
      filters: [Object],
      whitelist: [Array],
      Model: Model { users }
    },
    discriminatorKey: '__t',
    discriminators: {},
    lean: true,
    overwrite: true,
    useEstimatedDocumentCount: false,
    find: [Function: newMethod],
    get: [Function: newMethod],
    create: [Function: newMethod],
    update: [Function: newMethod],
    patch: [Function: newMethod],
    remove: [Function: newMethod],
    methods: {
      find: [Array],
      get: [Array],
      create: [Array],
      update: [Array],
      patch: [Array],
      remove: [Array]
    },
    hooks: [Function: hooks],
    _events: [Object: null prototype] {
      created: [Function],
      updated: [Function],
      removed: [Function],
      patched: [Function]
    },
    _eventsCount: 4,
    _maxListeners: undefined,
    setMaxListeners: [Function: setMaxListeners],
    getMaxListeners: [Function: getMaxListeners],
    emit: [Function: emit],
    addListener: [Function: addListener],
    on: [Function: addListener],
    prependListener: [Function: prependListener],
    once: [Function: once],
    prependOnceListener: [Function: prependOnceListener],
    removeListener: [Function: removeListener],
    off: [Function: removeListener],
    removeAllListeners: [Function: removeAllListeners],
    listeners: [Function: listeners],
    rawListeners: [Function: rawListeners],
    listenerCount: [Function: listenerCount],
    eventNames: [Function: eventNames],
    publish: [Function: publish],
    registerPublisher: [Function: registerPublisher],
    _super: undefined,
    [Symbol(@feathersjs/transport-commons/publishers)]: {}
  },
  app: [Function: app] EventEmitter {
    _events: [Object: null prototype] {
      mount: [Function: onmount],
      publish: [Function],
      disconnect: [Array],
      logout: [Function],
      connection: [Function],
      login: [Function]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    setMaxListeners: [Function: setMaxListeners],
    getMaxListeners: [Function: getMaxListeners],
    emit: [Function: emit],
    addListener: [Function: addListener],
    on: [Function: addListener],
    prependListener: [Function: prependListener],
    once: [Function: once],
    prependOnceListener: [Function: prependOnceListener],
    removeListener: [Function: removeListener],
    off: [Function: removeListener],
    removeAllListeners: [Function: removeAllListeners],
    listeners: [Function: listeners],
    rawListeners: [Function: rawListeners],
    listenerCount: [Function: listenerCount],
    eventNames: [Function: eventNames],
    init: [Function: init],
    defaultConfiguration: [Function: defaultConfiguration],
    lazyrouter: [Function: lazyrouter],
    handle: [Function: handle],
    use: [Function: newMethod],
    route: [Function: route],
    engine: [Function: engine],
    param: [Function: param],
    set: [Function: set],
    path: [Function: path],
    enabled: [Function: enabled],
    disabled: [Function: disabled],
    enable: [Function: enable],
    disable: [Function: disable],
    acl: [Function],
    bind: [Function],
    checkout: [Function],
    connect: [Function],
    copy: [Function],
    delete: [Function],
    get: [Function],
    head: [Function],
    link: [Function],
    lock: [Function],
    'm-search': [Function],
    merge: [Function],
    mkactivity: [Function],
    mkcalendar: [Function],
    mkcol: [Function],
    move: [Function],
    notify: [Function],
    options: [Function],
    patch: [Function],
    post: [Function],
    propfind: [Function],
    proppatch: [Function],
    purge: [Function],
    put: [Function],
    rebind: [Function],
    report: [Function],
    search: [Function],
    source: [Function],
    subscribe: [Function],
    trace: [Function],
    unbind: [Function],
    unlink: [Function],
    unlock: [Function],
    unsubscribe: [Function],
    all: [Function: all],
    del: [Function],
    render: [Function: render],
    listen: [Function: newMethod],
    request: IncomingMessage { app: [Circular] },
    response: ServerResponse { app: [Circular] },
    cache: {},
    engines: {},
    settings: {
      'x-powered-by': true,
      etag: 'weak',
      'etag fn': [Function: generateETag],
      env: 'development',
      'query parser': 'extended',
      'query parser fn': [Function: parseExtendedQueryString],
      'subdomain offset': 2,
      'trust proxy': false,
      'trust proxy fn': [Function: trustNone],
      view: [Function: View],
      views: 'D:\\Programmieren\\mobilecomputing\\server\\views',
      'jsonp callback name': 'callback',
      host: 'localhost',
      port: 3030,
      public: 'D:\\Programmieren\\mobilecomputing\\server\\public',
      paginate: [Object],
      authentication: [Object],
      mongodb: 'mongodb://localhost:27017/ichgeheinkaufen',
      mongooseClient: [Mongoose],
      defaultAuthentication: 'authentication'
    },
    locals: [Object: null prototype] { settings: [Object] },
    mountpath: '/',
    configure: [Function: configure],
    service: [Function: service],
    setup: [Function: newMethod],
    version: '4.5.2',
    methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
    mixins: [
      [Function: hookMixin],
      [Function: eventMixin],
      [Function],
      [Function],
      [Function]
    ],
    services: { authentication: [Object], users: [Object], articles: [Object] },
    providers: [ [Function] ],
    _setup: false,
    hookTypes: [ 'before', 'after', 'error', 'finally' ],
    hooks: [Function: hooks],
    eventMappings: {
      create: 'created',
      update: 'updated',
      remove: 'removed',
      patch: 'patched'
    },
    _super: undefined,
    _router: [Function: router] {
      params: {},
      _params: [],
      caseSensitive: false,
      mergeParams: undefined,
      strict: false,
      stack: [Array]
    },
    rest: {
      find: [Function],
      get: [Function],
      create: [Function],
      update: [Function],
      patch: [Function],
      remove: [Function]
    },
    channel: [Function: channel],
    publish: [Function: publish],
    registerPublisher: [Function: registerPublisher],
    lookup: [Function: lookup],
    defaultAuthentication: [Function],
    io: Server {
      nsps: [Object],
      parentNsps: Map {},
      _path: '/socket.io',
      _serveClient: true,
      parser: [Object],
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
      sockets: [Namespace],
      eio: [Server],
      httpServer: [Server],
      engine: [Server]
    },
    _isSetup: true,
    [Symbol(@feathersjs/transport-commons/channels)]: { authenticated: [Channel] },
    [Symbol(@feathersjs/transport-commons/publishers)]: { [Symbol(@feathersjs/transport-commons/all-events)]: [Function] },
    [Symbol(@feathersjs/transport-commons/router)]: {
      _rootNode: [Node],
      _strictMode: undefined,
      _staticRoutesMap: [Object]
    }
  },
  method: 'find',
  path: 'users',
  params: {
    query: { _id: null },
    route: {},
    provider: 'rest',
    headers: {
      host: 'localhost:3030',
      connection: 'keep-alive',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.158 Safari/537.36',      'sec-fetch-dest': 'empty',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyJ9.eyJpYXQiOjE1ODU1MDE4NzUsImV4cCI6MTU4NTU4ODI3NSwiYXVkIjoiaHR0cHM6Ly95b3VyZG9tYWluLmNvbSIsImlzcyI6ImZlYXRoZXJzIiwic3ViIjoiNWU4MGQxMDJhZTQzOTIyZDAwZGUyMmE3IiwianRpIjoiMjViOTYyYTEtMGU4NS00YTc2LWI1MTgtMmI5NTkwOWEzZTViIn0.viZS1PD1gkmB5PvjciQUgbBQd0goAhRnCuj8Zd_4FOE',
      accept: '*/*',
      'sec-fetch-site': 'none',
      'sec-fetch-mode': 'cors',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7',
      cookie: 'io=iHdadZpPyiI3dfUPAAAA',
      'if-none-match': 'W/"3b83-MxHgQKevmAnhYmVGgznsqj5oLUo"'
    },
    authentication: {
      strategy: 'jwt',
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyJ9.eyJpYXQiOjE1ODU1MDE4NzUsImV4cCI6MTU4NTU4ODI3NSwiYXVkIjoiaHR0cHM6Ly95b3VyZG9tYWluLmNvbSIsImlzcyI6ImZlYXRoZXJzIiwic3ViIjoiNWU4MGQxMDJhZTQzOTIyZDAwZGUyMmE3IiwianRpIjoiMjViOTYyYTEtMGU4NS00YTc2LWI1MTgtMmI5NTkwOWEzZTViIn0.viZS1PD1gkmB5PvjciQUgbBQd0goAhRnCuj8Zd_4FOE',
      payload: [Object]
    },
    user: {
      _id: 5e80d102ae43922d00de22a7,
      username: 'carolinev',
      firstname: 'Caroline',
      surname: 'Viertler',
      plz: '8010',
      city: 'Graz',
      street: 'Theodor-Körnerstraße 115',
      password: '$2a$10$vuHQYLgY5e1JbIPuGGK3AuRdT5huELgVUwmHtML0fRPUOkb93pc/K',
      latitude: 47.0878864,
      longitude: 15.4288563,
      createdAt: 2020-03-29T16:46:58.975Z,
      updatedAt: 2020-03-29T16:46:58.975Z,
      __v: 0
    },
    authenticated: true,
    paginate: false,
    _populate: 'skip'
  }
}


headers
{
  host: 'localhost:3030',
  connection: 'keep-alive',
  'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.158 Safari/537.36',    
  'sec-fetch-dest': 'empty',
  authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyJ9.eyJpYXQiOjE1ODU1MDE4NzUsImV4cCI6MTU4NTU4ODI3NSwiYXVkIjoiaHR0cHM6Ly95b3VyZG9tYWluLmNvbSIsImlzcyI6ImZlYXRoZXJzIiwic3ViIjoiNWU4MGQxMDJhZTQzOTIyZDAwZGUyMmE3IiwianRpIjoiMjViOTYyYTEtMGU4NS00YTc2LWI1MTgtMmI5NTkwOWEzZTViIn0.viZS1PD1gkmB5PvjciQUgbBQd0goAhRnCuj8Zd_4FOE',
  accept: '*/*',
  'sec-fetch-site': 'none',
  'sec-fetch-mode': 'cors',
  'accept-encoding': 'gzip, deflate, br',
  'accept-language': 'de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7',
  cookie: 'io=_EYIsADxoVhMD3VSAAAA',
  'if-none-match': 'W/"3b83-MxHgQKevmAnhYmVGgznsqj5oLUo"'
}